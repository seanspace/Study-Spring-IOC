<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd">
	<!-- 配置bean 
		class:bean的全类名,通过反射实例化,所以要求有对应的无参构造器.
		id:标识容器中的bean.id唯一.
	-->
	<bean id="helloWorld" class="com.bin.spring.beans.HelloWorld">
		<property name="name" value="Spring"></property>
	</bean>
	
	<!-- 通过构造方法来配置bean的属性,仅靠参数顺序初始化,会出现问题.可以指定参数的类型,以区分重载的构造器. -->
	<bean id="car" class="com.bin.spring.beans.Car">
		<constructor-arg value="Audi" index="0" type="java.lang.String"></constructor-arg>
		<constructor-arg index="1" type="java.lang.String">
			<!-- 如果包含特殊字符,可以使用<![CDATA[<ShangHai^>]]>包含起来 -->
			<value><![CDATA[<ShangHai^>]]></value>
		</constructor-arg>
		<constructor-arg index="2" type="int">
			<!-- 使用子标签定义属性值. -->
			<value>250</value>
		</constructor-arg>
	</bean>
	
	<!-- 通过ref配置bean之间的引用关联. -->
	<bean id="person" class="com.bin.spring.beans.Person">
		<property name="name" value="Tom"></property>
		<property name="age" value="24"></property>
		<!-- 1. ref属性配置
		<property name="car" ref="car"></property> -->
		<!-- 2. ref子节点配置. -->
		<!-- <property name="car">
			<ref bean="car"/>
		</property> -->
		<!-- 3.内部bean,不能够被外部bean引用. -->
		<property name="car">
			<bean class="com.bin.spring.beans.Car">
				<constructor-arg value="Ford"></constructor-arg>
				<constructor-arg value="Changan"></constructor-arg>
				<constructor-arg value="200000" type="int"></constructor-arg>
			</bean>
		</property>
	</bean>
	
	<!-- null赋值和为级联属性赋值 -->
	<bean id="person2" class="com.bin.spring.beans.Person">
		<constructor-arg value="Jerry"></constructor-arg>
		<constructor-arg value="25"></constructor-arg>
		<!-- <constructor-arg ref="car"></constructor-arg> -->
		<!-- 测试赋值null -->
		<!-- <constructor-arg><null/></constructor-arg> -->
		<constructor-arg ref="car"></constructor-arg>
		<!-- 为级联属性赋值.需要先初始化car. -->
		<property name="car.price" value="300000"></property>
	</bean>
	
	<!-- 配置集合属性 -->
	<bean id="person3" class="com.bin.spring.beans.cllection.Person">
		<property name="name" value="Mike"></property>
		<property name="age" value="20"></property>
		<property name="cars" >
			<!-- 使用list标签配置List集合属性. -->
			<list>
				<ref bean="car"/>
			</list>
		</property>
	</bean>
	
	<!-- 设置Map集合属性 -->
	<bean id="newPerson" class="com.bin.spring.beans.cllection.NewPerson">
		<property name="name" value="Rose"></property>
		<property name="age" value="28"></property>
		<property name="cars">
			<map>
				<entry key="AA" value-ref="car"></entry>
			</map>
		</property>
	</bean>

	<!-- 配置properties属性值 -->
	<bean id="dataSource" class="com.bin.spring.beans.cllection.DataSource">
		<property name="properties">
			<props>
				<prop key="user">root</prop>
				<prop key="password">1234</prop>
				<prop key="jdbcUrl">jdbc:mysql:///test</prop>
				<prop key="driverClass">com.mysql.jdbc.Driver</prop>
			</props>
		</property>
	</bean>
	
	<!-- 配置单例的集合bean,供多个bean进行引用,需要导入util命名空间 -->
	<util:list id="cars">
		<ref bean="car"/>
	</util:list>
	
	<bean id="person4" class="com.bin.spring.beans.cllection.Person">
		<property name="name" value="Jack"></property>
		<property name="age" value="29"></property>
		<property name="cars" ref="cars"></property>
	</bean>
	
	<!-- 通过P命名空间为bean属性,赋值,需要先导入p命名空间 .相对于传统的方式更加的简洁.-->
	<bean id="person5" class="com.bin.spring.beans.cllection.Person"
	p:age="30" p:name="Queen" p:cars-ref="cars"></bean>

</beans>
